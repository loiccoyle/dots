#!/bin/sh
#
# Set the wallpaper, generate colour scheme and log the current wallpaper file to $XDG_CACHE_HOME/wall.
# Requires hsetroot, flavours

set -e

usage() {
    printf "Usage: %s [-r] [-g] [WALLPAPER]

Set the wallpaper and generate colour scheme using flavours.
The wallpaper is written to %s/wall

Arguments:
    -r        Set a random wallpaper from \$WALLPAPER_DIR
              (%s)
    -g        Generate colour scheme for the wallpaper with flavours.

Example:
    Set a random wallpaper and generate a matching colour scheme.
      setwall -r -g
    Set a wallpaper and generate a matching colour scheme.
      setwall -g /path/to/wallpaper.png
    Set a wallpaper.
      setwall /path/to/wallpaper.png
" $(basename $0) $XDG_CACHE_HOME $WALLPAPER_DIR
}

set_wallpaper() {
    local abspath="$(readlink -f $1)"
    hsetroot -cover "$abspath" > /dev/null
    printf "%s" $abspath > "$XDG_CACHE_HOME/wall"
    notify-send --icon="$abspath" "Set wallpaper" "$(basename $abspath)"
}

generate() {
    local abspath="$(readlink -f $1)"
    flavours generate "$FLAVOURS_THEME_MODE" "$abspath"
    flavours apply generated
}

[ "$#" = 0 ] && usage && exit 0

GENERATE_COLOURS=0
RANDOM_WALL=0
# Parse options to the `setwall` command
while getopts ":hrg" opt; do
    case ${opt} in
        "h" )
            usage
            exit 0
            ;;
        "r" )
            RANDOM_WALL=1
            ;;
        "g" )
            GENERATE_COLOURS=1
            ;;
        \? )
            printf "Invalid Option: -%s\n" $OPTARG 1>&2
            usage
            exit 1
            ;;
    esac
done
shift $((OPTIND - 1))

if [ "$RANDOM_WALL" = 1 ]; then
    WALL="$(find "$WALLPAPER_DIR" -type f -not -path "*/.git*"  | shuf -n 1)"
else
    WALL="$(readlink -f "$1")"
fi

[ "$GENERATE_COLOURS" = 1 ] && generate "$WALL" &

set_wallpaper "$WALL"
