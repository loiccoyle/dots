(include "pollers.yuck")
(include "listeners.yuck")

(defwindow bar
  :monitor 0
  :hexpand false
  :vexpand false
  :geometry (geometry :x 0 :y 0 :width "100%")
  :anchor "top left"
  :reserve (struts :distance "10px" :side "top")
  (bar))

(defwidget bar []
  (centerbox :orientation "h"
       :class "bar"
    (box
      :halign "start"
      :spacing 12
      :space-evenly false
      (volume)
      (cpu)
      (gpu)
      (ram))
      ; (player))
    (box
      :halign "center"
      :space-evenly false
      (workspaces))
    (box
      :halign "end"
      :spacing 12
      :hexpand true
      :space-evenly false
      (github)
      (updates)
      (nordvpn)
      (temperature)
      ; (microphone)
      ; (speaker)
      (ping)
      ; (network)
      (disk)
      (date)
      (time)
      (systray :pack-direction "ltr" :icon-size 16)
    )))

(defwidget icon-module [icon ?class ?visible]
  (box :class "${class} icon-module"
       :orientation "h"
       :space-evenly false
       :visible {visible ?: true} ; because the argument is optional
    (label :class "label" :text "${icon}")
    (children)))

(defwidget circular-module [value thickness ?class]
  (box
    :class "${class} circular-module"
    :orientation "h"
    :vexpand false
    :hexpand false
    (circular-progress :value {value} :thickness {thickness} :start-at 25
    (children))))

(defwidget metric-module [icon value ?onclickicon ?onchange ?class]
  (box
    :class "${class} metric-module"
    :orientation "h"
    :space-evenly false
    (button :class "label" :onclick {onclickicon ?: ""} "${icon}")
    (scale
      :min 0
      :max 101
      :value {value}
      :onchange {onchange ?: ""}
      :orientation "h")))


; Left modules
(defwidget player []
  (icon-module :class "player" :icon "" :visible {player_listen.show == "yes"}
    (literal :content {player_listen.content})))

(defwidget volume []
  (tooltip "Volume: ${volume_poll.content}%"
    (eventbox :cursor "pointer" :onrightclick "pavucontrol &"
      (metric-module
        :class "volume"
        :icon "${volume_poll.icon}"
        :value {volume_poll.content}
        :onchange "pactl set-sink-volume @DEFAULT_SINK@ {}%; eww update volume_poll=\"$(./modules/volume.sh)\""
        :onclickicon "pactl set-sink-mute @DEFAULT_SINK@ toggle; eww update volume_poll=\"$(./modules/volume.sh)\""))))

(defwidget cpu []
  (tooltip "CPU usage: ${round(EWW_CPU.avg, 0)}%"
    (metric-module
      :class "cpu"
      :icon ""
      :value {round(EWW_CPU.avg, 0)})))

(defwidget gpu []
  (tooltip "GPU usage: ${nvidia_listen}%"
    (metric-module
      :class "gpu"
      :icon ""
      :value {nvidia_listen})))

(defwidget ram []
  (tooltip "RAM usage: ${round(EWW_RAM.used_mem_perc, 0)}%"
    (metric-module
      :class "ram"
      :icon ""
      :value {round(EWW_RAM.used_mem_perc, 0)})))

; Center modules
(defwidget workspaces []
  (eventbox
    :onscroll "d=$([ {} = up ] && echo prev || echo next); bspc desktop -f $d"
    :cursor "pointer"
    (literal :content workspaces_listen)))

; Right modules
(defwidget date []
  (icon-module
    :class "date"
    :icon ""
    (label :text date_poll)))

(defwidget time []
  (icon-module
    :class "time"
    :icon ""
    (label :text "${formattime(EWW_TIME, "%H:%M")}")))

(defwidget disk []
  (icon-module
    :class "disk"
    :icon ""
    (label :text "${round(EWW_DISK["/"].used_perc, 0)}%")))

(defwidget github []
  (box
    :class "notification"
    :halign "center"
    :visible {github_poll != "0"}
    (eventbox :cursor "pointer"
      (button :onclick "$BROWSER https://github.com/notifications"
        (icon-module
          :class "github"
          :icon ""
          (label :text github_poll))))))

(defwidget updates []
  (box
    :class "notification"
    :halign "center"
    :visible {updates_poll != "0"}
    (eventbox :cursor "pointer"
      (tooltip "Update system"
        (button :onclick "$TERMINAL --class=float --hold -e paru -Syu &"
          (icon-module
            :class "updates"
            :icon ""
            (label :text updates_poll)))))))

(defwidget nordvpn []
  (eventbox
    :class "nordvpn ${nordvpn_poll != "Off" ? "nordvpn-on" : "nordvpn-off"}"
    :cursor "pointer"
    (tooltip "Toggle NordVPN"
      (button
        :onclick "notify-send -i info 'Toggling nordvpn'; nordvpn ${nordvpn_poll=="Off" ? "connect" : "disconnect"}"
        :onclickright "rofi-nordvpn &"
        (icon-module
          :class "nordvpn"
          :icon "󰊠"
          (label :text nordvpn_poll))))))

(defwidget ping []
  (icon-module
    :class "ping"
    :icon "󰐷"
    (label :text ping_poll)))

(defwidget temperature []
  (icon-module
    :class "temperature ${EWW_TEMPS.K10TEMP_TCCD1 >= 90 ? "temperature-hot" : ""}"
    :icon "${EWW_TEMPS.K10TEMP_TCCD1 >= 90 ? "" :
             EWW_TEMPS.K10TEMP_TCCD1 >= 80 ? "" :
             EWW_TEMPS.K10TEMP_TCCD1 >= 70 ? "" :
             ""}"
      (label :text "${round(EWW_TEMPS.K10TEMP_TCCD1, 0)}°C")))

; (defwidget network []
  ; (icon-module :class "network" :icon "󰛳"
    ; (label :text "${round(EWW_NET.enp5s0.NET_UP / 1000000, 2)}/${round(EWW_NET.enp5s0.NET_DOWN / 1000000, 2)}")))

; (defwidget speaker []
  ; (icon-module :class "speaker"
               ; :icon {speaker_poll.icon}
    ; (eventbox :onscroll `eww update speaker_poll="$(./modules/speaker.sh {})"`
      ; (button :onclick `eww update speaker_poll="$(./modules/speaker.sh toogle)"`
        ; (label :text {speaker_poll.content})))))

; (defwidget microphone []
  ; (icon-module :class "microphone"
               ; :icon {microphone_poll.icon}
    ; (eventbox :onscroll `eww update microphone_poll="$(./modules/microphone.sh {})"`
      ; (button :onclick `eww update microphone_poll="$(./modules/microphone.sh toogle)"`
        ; (label :text {microphone_poll.content})))))
