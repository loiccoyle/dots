#!/bin/sh

# Ricing control panel.
# Requires rofi, flavours, sxiv

menu() {
    rofi -dmenu -p "Select" -no-custom "$@"
}

init_menu() {
    printf "Select a wallpaper and generate a colour scheme\\nSelect a wallpaper\\nSelect a colour scheme" | menu -l 3
}

wallpaper() {
    local selected_bg
    selected_bg="$(find "$WALLPAPER_DIR" -type f -not -path "*/.git*" | shuf | sxiv -tio -N "float" | shuf -n 1)"
    if [ -n "$selected_bg" ]; then
        setwall "$@" "$selected_bg"
    fi
}

colour_scheme() {
    declare -a schemes
    declare -i return_code
    declare -i scheme_index
    local selected_scheme
    local current_theme
    schemes=($(flavours list -l))
    current_theme="$(flavours current)"
    while true; do
        scheme_index="$(echo "${schemes[@]}" | menu -mesg "<b>Alt-Return</b> to preview" -format i -sep " " -selected-row "$scheme_index" -markup -kb-custom-1 "Alt-Return")"
        return_code=$?
        if [ ${return_code} = 1 ]; then
            # escape was pressed
            flavours apply "$current_theme" && notify-send "Changed colour scheme" "Scheme: $current_theme"
            return 1
        elif [ -n "$scheme_index" ]; then
            # either preview or selection
            selected_scheme="${schemes[$scheme_index]}"
            flavours apply "$selected_scheme" && notify-send "Changed colour scheme" "Scheme: $selected_scheme"
            [ ${return_code} = 0 ] && return 0  # selection
        fi
    done
}


case "$(init_menu)" in
    "Select a wallpaper and generate a colour scheme")
        wallpaper -g
        ;;
    "Select a wallpaper")
        wallpaper
        ;;
    "Select a colour scheme")
        colour_scheme
        ;;
esac
