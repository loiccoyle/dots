#           _     _       _
#  _____  _| |__ | | ____| |
# / __\ \/ / '_ \| |/ / _` |
# \__ \>  <| | | |   < (_| |
# |___/_/\_\_| |_|_|\_\__,_|


# Terminal emulator
super + {_,shift + } Return
    {$TERMINAL,scratchpad dropdown}
# Start lfcd in a terminal
super + o
    $TERMINAL -e lfcd-zsh
# Browser
super + w
    $BROWSER
# Toggle the bar and the top padding
super + b
    if [ "$(bspc config -m "$PRIMARY_MONITOR" top_padding)" = "$BAR_HEIGHT" ]; then \
        bspc config -m "$PRIMARY_MONITOR" top_padding 0;\
    fi;\
    polybar-msg cmd toggle;
# Password manager
super + p
    bspc rule --add Arandr -o state=floating && arandr
# Set a random wallpaper
super + shift + Home
    setwall -r -g

# rofi
# Program launcher
super + d
    rofi -show run
# Rofi-ception
super + shift + d
    rofi -show run -filter "rofi-"
# Hotkey list
super + question
    rofi-hag
# Torrent search
super + t
    rofi-prowlet -s -k
# Twitch
super + shift + t
    notify-send -t 2000 -i "search" "Twitch" "Fetching following list"; rofi-ttv followed
# Rice control panel
super + Home
    rofi-rice
# Service toggles
super + End
    rofi-toggle
# Screenshot
Print
    rofi-screenshot
# Record
shift + Print
    rofi-record
# Clipboard manager
super + v
    rofi -modi "clipboard:greenclip print" -show clipboard -run-command '{cmd}'
# Alt-tab
alt + Tab
    rofi -show window

# notifcation hotkeys
# Close notification
super + n
    dunstctl close
# Pop notification
super + shift + n
    dunstctl history-pop
# Notification action
super + ctrl + n
    dunstctl context

# media keys
# Audio mute
XF86AudioMute
    pactl set-sink-mute @DEFAULT_SINK@ toggle
# Lower volume
XF86AudioLowerVolume
    pactl set-sink-volume @DEFAULT_SINK@ -2%
# Raise volume
XF86AudioRaiseVolume
    pactl set-sink-volume @DEFAULT_SINK@ +2%
# Audio play/pause
XF86AudioPlay
    playerctl --all-players play-pause
# Audio next
XF86AudioPrev
    playerctl previous
# Audio previous
XF86AudioNext
    playerctl next
# Audio stop
XF86AudioStop
    playerctl stop

# backlight
# decrease brightness
XF86MonBrightnessDown
    xbacklight -dec 5
# increase brightness
XF86MonBrightnessUp
    xbacklight -inc 5

# bspwm hotkeys
# Quit/Restart bspwm
super + alt + {q,r}
    bspc {quit,wm -r && pkill -USR1 -x sxhkd}
# Kill node 
super + shift + q
    bspc node --kill
# Close node
super + q
    bspc node --close
# send the newest marked node to the newest preselected node
# super + y
#       bspc node newest.marked.local -n newest.!automatic.local
# Swap the current node and the biggest node
super + g
    bspc node -s biggest.local
# Decrease gaps
super + Next
    gap=$(($(bspc config window_gap) - 2));\
    bspc config window_gap $((gap>0 ? gap : 0))
# Increase gaps
super + Prior
    bspc config window_gap $(($(bspc config window_gap) + 2))
# Increase borders
super + shift + Next
    width=$(($(bspc config border_width) - 2));\
    bspc config border_width $((width>0 ? width : 1))
# Decrease borders
super + shift + Prior
    bspc config border_width $(($(bspc config border_width) + 2))

# state/flags
# Fullscreen node
super + f
    bspc node -t '~fullscreen'
# Float node
super + space
    bspc node focused -t '~floating'
# Alternate between the tiled and monocle layout
super + shift + f
    bspc desktop -l next
# tiled,pseudo_tiled,floating,fullscreen}
# Set the node flags/pseudo tiled state
super + s
    flag="$(printf "%b" "sticky\nlocked\nprivate\npseudo tiled\nhidden" | rofi -dmenu -p "Select" -no-custom -l 5)";\
    if [ -n "$flag" ]; then \
        notify-send "Toggling flag: $flag";\
        if [ "$flag" = "pseudo tiled" ]; then \
            bspc node --state '~pseudo_tiled';\
        else;\
            bspc node --flag "$flag";\
        fi;\
    fi;
# Hide node
super + BackSpace
    bspc node --flag hidden
# TODO: This can be done better
# Unhide nodes
super + shift + BackSpace
    bspc query -N -n .local.hidden | \
    xargs -I node_id sh -c 'xprop -id node_id | grep "WM_CLASS" | grep -q -v "dropdown" && bspc node node_id --flag hidden'


# focus/swap
# Focus the node in the given direction (east, west)
super + {h,l}
    bspc node -f {west,east}
# Focus node in the given direction (north, south) or cycle monocle stack
super + {j,k}
    selections={(south prev.local.!hidden.window),(north next.local.!hidden.window)};\
    [ "$(bspc query --tree --desktop | jq -r ".layout")" != "monocle" ] && selection=${selections[1]} || selection=${selections[2]};\
    bspc node -f "$selection"
# Focus floating or tiled
super + a
    if bspc query --node 'focused.floating' --nodes; then \
        bspc node -f last.local.tiled || bspc node -f any.local.tiled;\
    else;\
        bspc node -f last.local.floating || bspc node -f any.local.floating;\
    fi;
# Swap node or move floating nodes
super + shift + {h,j,k,l}
    direction="{west,south,north,east}";\
    if bspc query --node 'focused.floating' --nodes; then \
        delta=32;\
        case "$direction" in;\
            "north") bspc node -v 0 -$delta;;\
            "south") bspc node -v 0 $delta;;\
            "east") bspc node -v $delta 0;;\
            "west") bspc node -v -$delta 0;;\
        esac;\
    else;\
        bspc node -s "$direction";\
    fi;
# focus the node for the given path jump
# super + {p,b,comma,period}
#       bspc node -f @{parent,brother,first,second}
# focus the next/previous node in the current desktop
# super + {_,shift + }c
#       bspc node -f {next,prev}.local
# Focus the next/previous desktop in the current monitor
super + bracket{left,right}
    bspc desktop -f {prev,next}.local
# Scroll to cycle desktops
super + button{4,5}
    bspc desktop -f {prev,next}.local
# Move & follow node to the next/previous desktop in the current monitor
super + shift + bracket{left,right}
    bspc node --to-desktop {prev,next} --follow
# Focus the last desktop
super + Tab
    bspc desktop -f last
# Move node to last desktop
super + shift + Tab
    bspc node --to-desktop last
# Focus or send to next monitor
super + {_,shift + } grave
    bspc {monitor -f next,node -m next --follow}
# focus the older or newer node in the focus history
# super + {o,i}
#       bspc wm -h off; \
#       bspc node {older,newer} -f; \
#       bspc wm -h on
# Focus or send to the given desktop
super + shift + {1-9,0}
    bspc node -d '{1-9,10}'
# Change desktop, if already on desktop, go to previous desktop
super + {1-9,0}
    dest="{1-9,10}";\
    current="$(bspc query --desktop focused --desktops --names)";\
    if [ "$dest" = "$current" ]; then \
        bspc desktop -f last;\
    else;\
        bspc desktop -f "$dest";\
    fi;
# # Float next open node
# super + shift + space
#     bspc rule --add "*" state=floating --one-shot
# rotate current node
super + r
    bspc node @focused:parent -R 90
# Rotate tree
super + shift + r
    bspc node @/ -C forward
# Move current node to a pre-selected space
super + m
    bspc node -n last.!automatic


# preselect
# Preselect the direction
super + ctrl + {h,j,k,l}
    bspc node -p {west,south,north,east}
# Preselect the ratio
super + ctrl + {1-9}
    bspc node -o 0.{1-9}
# Cancel the preselection for the focused node
super + ctrl + space
    bspc node -p cancel
# Cancel the preselection for the focused desktop
super + ctrl + shift + space
    bspc query -N -d | xargs -I id -n 1 bspc node id -p cancel


# resize
# Expand a node by moving one of its side outward
super + alt + {h,j,k,l}
    ~/.config/bspwm/scripts/bspwm-resize {west,south,north,east}
# Balance the tree
super + {_,shift + } equal
    bspc node @/ {--balance,--equalize}
