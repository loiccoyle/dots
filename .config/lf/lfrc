#  _  __
# | |/ _|
# | | |_
# | |  _|
# |_|_|
#
# See: https://github.com/gokcehan/lf/wiki/

# VARIABLES
# $f   current file
# $fs  selected file(s) separated with 'filesep'
# $fx  current file or selected file(s) if any
# $id  id number of the client

# interpreter for shell commands (needs to be POSIX compatible)
set shell zsh
# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-euy'
# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"
# leave some space at the top and the bottom of the screen
set scrolloff 10
# ctpv config: https://github.com/NikitaIvanovV/ctpv
set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id
set hidden
set incsearch
set incfilter
set icons
set info size
set autoquit
set mouse

# cmd line mappings
cmap <tab> cmd-menu-complete
cmap <backtab> cmd-menu-complete-back
# for some reason backspace is c-backspace
cmap <backspace> cmd-delete-unix-word
cmap <up> cmd-history-prev
cmap <down> cmd-history-next

# use enter for shell commands
map <enter> shell
# execute current file (must be executable)
map x $$f
map X !$f
# dedicated keys for file opener actions
map o &$OPENER $f
# map O $mimeopen --ask $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    case $(file -b -L --mime-type $f) in
        text/* | application/json | inode/x-empty | application/csv)
            $EDITOR $fx
            ;;
        *)
            for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done
            ;;
    esac
}}

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
# cmd trash %set -f; mv $fx ~/.trash

# define a custom 'delete' command
cmd delete ${{
    set -f
    printf "$fx\n"
    printf "delete?[y/n]"
    read ans
    [ $ans = "y" ] && rm -rf $fx
 }}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac

}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar -czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
# cmd zip ${{
#     set -f
#     mkdir $1
#     cp -r $fx $1
#     zip -r $1.zip $1
#     rm -rf $1
# }}

# zoxide integration https://github.com/gokcehan/lf/wiki/Integrations#zoxide
cmd z %{{
	result="$(zoxide query --exclude $PWD $@ | sed 's/\\/\\\\/g;s/"/\\"/g')"
	lf -remote "send $id cd \"$result\""
}}

cmd zi ${{
	result="$(zoxide query -i | sed 's/\\/\\\\/g;s/"/\\"/g')"
	lf -remote "send $id cd \"$result\""
}}

cmd on-cd &{{
        zoxide add "$PWD"
}}

# Share files through https://ix.io
cmd share ${{
    ixurl="$(ix $fx 2> /dev/null)"
    notify-send --icon share "Uploaded to ix.io" "$ixurl"
    echo "$ixurl" | xclip -selection c
}}

# Start a http server in the current folder
cmd serve ${{
    python -m http.server 8000
}}

# Make files dragable
cmd drag ${{
    dragon-drop $fx
}}

# y (select for copy) and P to paste soft-link
# d (select for cut) and P to paste hard-link
cmd link %{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    if [ "$#" -lt 1 ]; then
        lf -remote "send $id echo no files to link"
        exit 0
    fi
    case "$mode" in
        # symbolically copy mode is indicating a soft link
        copy) ln -sr -t . -- "$@";;
        # while a move mode is indicating a hard link
        move) ln -t . -- "$@";;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

cmd new_node %{{
  node="$1"
  [[ "$node" == */ ]] && mkdir "$node" || touch "$node"
}}

# zoxide
map gf push :z<space>
map gF zi

map P link
map a push :new_node<space>
# show the result of execution of previous commands
map ` !true

# rename
map r rename # before extension
map A push r<end> # at the end
map I push r<home> # at the very beginning
# bulkrename
map R $vidir $fs

map D delete
# $EDITOR on selected files
map E $$EDITOR $fx
# copy selected path
map Y $printf '%s' "$fx" | xclip -i -selection clipboard
map gd :drag
# compress and extract
map gt push :tar<space>
map gx :extract
map gp $papis add $fx
# chmod
map gcx $chmod +x $fx
map gcX $chmod -x $fx
map gcr $chmod +r $fx
map gcR $chmod -r $fx
map gcw $chmod +w $fx
map gcW $chmod -w $fx

map zd set dironly!
map <c-z> $ kill -STOP $PPID
# Parent folder cycle
map J push zdhjlzd
map K push zdhklzd
map <a-/> filter
